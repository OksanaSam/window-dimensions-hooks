{"version":3,"sources":["../../src/hooks/useWindowDimensions.js","components/Dimensions.js","components/Height.js","../../src/hooks/useWindowHeight.js","components/Width.js","../../src/hooks/useWindowWidth.js","App.js","index.js"],"names":["initialState","height","width","reducer","state","action","Dimensions","React","dimensions","dispatch","handleWindowResize","newDim","window","innerWidth","oldDim","type","dispatchAction","useWindowDimensions","Height","setheight","useWindowHeight","Width","setWidth","useWindowWidth","App","ReactDOM","render","document","getElementById"],"mappings":"k1DAEA,IAAMA,EAAe,CAAEC,OAAF,KAAgBC,MAAO,MAgBtCC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAR,MACE,kBACE,MAAO,CACLJ,OAAQI,EADH,OAELH,MAAOG,EAAOH,OAElB,eACE,YACKG,EADL,QAGF,cACE,eAEEJ,OAAQI,EAAOJ,SAEnB,cACE,eAEEC,MAAOG,EAAOH,QAElB,eACE,eAGF,QACE,MAAM,IAAN,QC3BSI,EAdI,WAAO,IAAD,ED8CG,WAAM,QACDC,uBADC,MACzBC,EADyB,KACbC,EADa,KAG1BC,EAAqB,WACzB,IAAMC,EAAS,CAAEV,OAAQW,OAAV,YAA8BV,MAAOU,OAAOC,aAjDxC,SAACC,EAAQH,EAAQF,GAClCK,WAAkBH,EAAtB,OACMG,UAAiBH,EAArB,MACEF,EAAS,CAAEM,KAAF,WAAoBJ,WAE7BF,EAAS,CAAEM,KAAF,UAAmBd,OAAQU,EAAOV,SAEpCa,UAAiBH,EAArB,MACLF,EAAS,CAAEM,KAAF,UAAmBb,MAAOS,EAAOT,QAE1CO,EAAS,CAAEM,KAAM,aAwCjBC,CAAeR,EAAYG,EAA3BK,IAsBF,IAAK,IAAL,KAnBAT,qBAAgB,WAEd,wBAAWK,OAST,OAPAH,EAAS,CACPM,KADO,cAEPd,OAAQW,OAFD,YAGPV,MAAOU,OAAOC,aAEhBD,uCAEO,WACLA,6CApB0B,IA2BhC,EACE,cAAIJ,KAAJ,EACY,CAAEP,OAAF,EAAaC,MAAO,GC1ERe,GAAlBhB,EADe,EACfA,OAAQC,EADO,EACPA,MAChB,OACE,oCACE,4BACE,wDAEF,2BACGD,EADH,QACgBC,EADhB,QCKSgB,EAZA,WACb,IAAMjB,ECDgB,WAAM,QACAM,mBADA,SACrBN,EADqB,KACbkB,EADa,KAItBT,EAAqB,kBAAMS,EAAUP,OAAhB,cAc3B,OAZAL,qBAAgB,WAEd,wBAAWK,OAIT,OAHAO,EAAUP,OADuB,aAEjCA,uCAEO,WACLA,6CAPNL,IAYON,GAAP,EDjBemB,GACf,OACE,oCACE,4BACE,oDAEF,2BAAInB,EAAJ,QEKSoB,EAZD,WACZ,IAAMnB,ECDe,WAAM,QACDK,mBADC,SACpBL,EADoB,KACboB,EADa,KAIrBZ,EAAqB,kBAAMY,EAASV,OAAf,aAc3B,OAZAL,qBAAgB,WAEd,wBAAWK,OAIT,OAHAU,EAASV,OADwB,YAEjCA,uCAEO,WACLA,6CAPNL,IAYOL,GAAP,EDjBcqB,GACd,OACE,oCACE,4BACE,mDAEF,2BAAIrB,EAAJ,QEGSsB,EARH,kBACV,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.b0f207ff.chunk.js","sourcesContent":["import * as React from \"react\";\n\nconst initialState = { height: null, width: null };\n\nconst dispatchAction = (oldDim, newDim, dispatch) => {\n  if (oldDim.height !== newDim.height) {\n    if (oldDim.width !== newDim.width) {\n      dispatch({ type: \"xyChange\", newDim });\n    } else {\n      dispatch({ type: \"yChange\", height: newDim.height });\n    }\n  } else if (oldDim.width !== newDim.width) {\n    dispatch({ type: \"xChange\", width: newDim.width });\n  } else {\n    dispatch({ type: \"noChange\" });\n  }\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"initialSize\":\n      return {\n        height: action.height,\n        width: action.width,\n      };\n    case \"xyChange\":\n      return {\n        ...action.newDim,\n      };\n    case \"yChange\":\n      return {\n        ...state,\n        height: action.height,\n      };\n    case \"xChange\":\n      return {\n        ...state,\n        width: action.width,\n      };\n    case \"noChange\":\n      return {\n        ...state,\n      };\n    default:\n      throw new Error();\n  }\n};\n\n// custom hook\nconst useWindowDimensions = () => {\n  const [dimensions, dispatch] = React.useReducer(reducer, initialState);\n\n  const handleWindowResize = () => {\n    const newDim = { height: window.innerHeight, width: window.innerWidth };\n    dispatchAction(dimensions, newDim, dispatch);\n  };\n\n  React.useEffect(() => {\n    // only run if in browser\n    if (typeof window !== \"undefined\") {\n      // dispatch initial size on component mount\n      dispatch({\n        type: \"initialSize\",\n        height: window.innerHeight,\n        width: window.innerWidth,\n      });\n      window.addEventListener(\"resize\", handleWindowResize, true);\n\n      return () => {\n        window.removeEventListener(\"resize\", handleWindowResize, true);\n      };\n    }\n  }, []);\n\n  // check if dimensions key values are null before returning object\n  // if null, return 0 for values (to prevent potential type errors)\n  for (var key in dimensions) {\n    if (dimensions[key] !== null) return dimensions;\n    else return { height: 0, width: 0 };\n  }\n};\n\nexport default useWindowDimensions;\n","import React from \"react\";\nimport { useWindowDimensions } from \"window-dimensions-hooks\";\n\nconst Dimensions = () => {\n  const { height, width } = useWindowDimensions();\n  return (\n    <>\n      <h1>\n        <code>useWindowDimensions()</code>\n      </h1>\n      <p>\n        {height}px x {width}px\n      </p>\n    </>\n  );\n};\n\nexport default Dimensions;\n","import React from \"react\";\nimport { useWindowHeight } from \"window-dimensions-hooks\";\n\nconst Height = () => {\n  const height = useWindowHeight();\n  return (\n    <>\n      <h1>\n        <code>useWindowHeight()</code>\n      </h1>\n      <p>{height}px</p>\n    </>\n  );\n};\n\nexport default Height;\n","import * as React from \"react\";\n\n// custom hook\nconst useWindowHeight = () => {\n  const [height, setheight] = React.useState(null);\n\n  // sets height when window is resized (from event listener)\n  const handleWindowResize = () => setheight(window.innerHeight);\n\n  React.useEffect(() => {\n    // only runs if in browser\n    if (typeof window !== \"undefined\") {\n      setheight(window.innerHeight); // sets initial height\n      window.addEventListener(\"resize\", handleWindowResize, true);\n\n      return () => {\n        window.removeEventListener(\"resize\", handleWindowResize, true);\n      };\n    }\n  }, []);\n\n  return height ? height : 0;\n};\n\nexport default useWindowHeight;\n","import React from \"react\";\nimport { useWindowWidth } from \"window-dimensions-hooks\";\n\nconst Width = () => {\n  const width = useWindowWidth();\n  return (\n    <>\n      <h1>\n        <code>useWindowWidth()</code>\n      </h1>\n      <p>{width}px</p>\n    </>\n  );\n};\n\nexport default Width;\n","import * as React from \"react\";\n\n// custom hook\nconst useWindowWidth = () => {\n  const [width, setWidth] = React.useState(null);\n\n  // sets width when window is resized (from event listener)\n  const handleWindowResize = () => setWidth(window.innerWidth);\n\n  React.useEffect(() => {\n    // only runs if in browser\n    if (typeof window !== \"undefined\") {\n      setWidth(window.innerWidth); // sets initial width\n      window.addEventListener(\"resize\", handleWindowResize, true);\n\n      return () => {\n        window.removeEventListener(\"resize\", handleWindowResize, true);\n      };\n    }\n  }, []);\n\n  return width ? width : 0;\n};\n\nexport default useWindowWidth;\n","import React from \"react\";\nimport Dimensions from \"./components/Dimensions\";\nimport Height from \"./components/Height\";\nimport Width from \"./components/Width\";\n\nconst App = () => (\n  <div>\n    <Dimensions />\n    <Height />\n    <Width />\n  </div>\n);\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}